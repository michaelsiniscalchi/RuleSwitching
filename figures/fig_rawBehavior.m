function fig = fig_rawBehavior( trialData, trials, tlabel, params )
%---------------------------------------------------------------------------------------------------
% plot_behByTrial()
%
% PURPOSE:   Plot behavioral variables from auditory discrimination session by trial
% AUTHORS:   MJ Siniscalchi & AC Kwan 191121
%
% INPUT ARGUMENTS
%   trialData:    Structure generated by flex_getSessionData().
%   trials:       Structure generated by flex_getTrialMasks().
%   tlabel:       Text to put as title of the plot
%   time_range:   Time in seconds to plot, e.g., [-2 6], around the cue
%
%---------------------------------------------------------------------------------------------------

%% SETUP PLOTTING PARAMETERS
setup_figprops('raster');
red = params.colors{1}; %Defined for all figures using cbrewer() in params
blue = params.colors{2};
% outcomeColor = mean([params.colors{2}; params.colors{3}]); %LBWH
outcomeColor = 'w'; %Do not indicate outcome period
blockColor = {'k',red,blue}; %sound, actionL, actionR
time_range = params.window;

%% GET FIRST TRIAL IN EACH RULE BLOCK
getSwTrial = @(type) [false; diff(trials.(type))] & trials.(type);
type = {'sound', 'actionL', 'actionR'};
swTrial.any = false(size(trials.sound,1),1); %trial mask for first trial of any block
for i = 1:numel(type)
    swTrial.(type{i}) = getSwTrial(type{i}); %trial mask for first trial in each rule
    swTrial.any = swTrial.any | swTrial.(type{i});
end

%% GENERATE FIGURE
fig = figure('Name',['Raw Behavior - ',tlabel]);
title(tlabel);
hold on;

%Draw horizontal line for first trial in first (sound) block
line(time_range,[0.5,0.5],'Color','k');

for j = 1:numel(trialData.cue)
    
    %Indicate first trial in each rule block
    if swTrial.any(j)
        color = blockColor{...
            [swTrial.sound(j),swTrial.actionL(j),swTrial.actionR(j)]};
        line(time_range,[j-0.5 j-0.5],'Color',color);
    end
    
    %Shaded area for cue
    t0 = trialData.cueTimes(j);
    eventDur = trialData.outcomeTimes(j)-t0; %Cue offset = outcome onset
    if trials.upsweep(j)
        eventShade(j,0,eventDur,red); %eventShade(trial_idx,time,dur,color)
    elseif trials.downsweep(j)
        eventShade(j,0,eventDur,blue);
    end
    
    %Shaded area for outcome
    eventTime = trialData.outcomeTimes(j)-t0;
    if trials.hit(j)
        eventShade(j,eventTime,0.5,outcomeColor)
    end
    
    %Shaded area for grace period (cue-onset to 500 ms)
    % eventShade(j,0,0.5,'w'); %If grace period was used
    
    %Plot tick marks for licks
    win = @(X) X(X>time_range(1) & X<time_range(2));
    LL = win(trialData.lickTimesLeft{j});
    RL = win(trialData.lickTimesRight{j});
    
    line([LL; LL],j+[-0.5*ones(size(LL)); 0.5*ones(size(LL))],'Color',red);
    line([RL; RL],j+[-0.5*ones(size(RL)); 0.5*ones(size(RL))],'Color',blue);
end

xlim([time_range(1),time_range(2)]);
ylim([0 numel(trialData.cue)]);
xlabel('Time from sound cue (s)');
ylabel('Trial number');
axis ij square;
end

function eventShade(trial_idx,time,dur,color)
p = fill([time,time+dur,time+dur,time],...
    [trial_idx-0.5,trial_idx-0.5,trial_idx+0.5,trial_idx+0.5],...
    color);
p.EdgeColor = 'none';
p.FaceAlpha = 0.3;
end