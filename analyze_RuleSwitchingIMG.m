%%% analyze_RuleSwitchingSession
%
%PURPOSE: To analyze individual sessions from a two-choice auditory rule switching task.
%
%AUTHOR: MJ Siniscalchi, 190701
%
%TO DO LIST:
%   -Setup to save to 'analysis' directory 
%
%--------------------------------------------------------------------------

clearvars;

%% Set parameters for analysis

% Calculate or re-calculate results
calculate.behavior             = false;
calculate.dFF                  = false;
calculate.cellF                = false; %First get cellf and neuropilf from ROIs, excluding overlapping regions and extremes of the FOV
calculate.trial_average_dFF    = false; %With rudimentary choice preference index: difference/sum of mean traces
calculate.modulation_idx       = false; %Single-unit linear classifier (LOOCV) --> AUROC analysis?
calculate.population_decode    = false; %Decode rule from population activity (Linear/LOOCV) 

% Plot results
Plot.single_units           = false;
Plot.modulation_idx         = false;

% File names for saved data
mat_file.behavior       = 'beh.mat';
mat_file.stackInfo      = 'stackinfo.mat';
mat_file.fluorescence   = 'dff.mat';

% Set paths to analysis code
[data_dir,~,~] = setPathList;
% Assign data directories and get experiment-spec parameters 
[dirs, expData] = expData_RuleSwitching(data_dir);

%% Set analysis parameters

%***Make func set_Params()
params.exclBorderWidth      = 3;        %For calc_cellF: n-pixel border of FOV to be excluded from analysis 
%params.expIDs              = 1:6;   % Specify experiments, if desired
params.cellIDs              = [];   % Specify cells, if desired; '[]' to include all 
params.trigTimes            = 'cueTimes'; % ***Still needed for calc_mlrActionOutcome
params.window               = (-2:0.5:8);
params.numBootstrapRepeat   = 1000;
params.CI                   = 0.9;
params.minNumTrial          = 0; %plot_psth.m needs to be reworked to accommodate this parameter

% For multiple linear regression
params.subset = {'left','right'}; % Fields from 'trials' structure to include in analysis; eg exclude 'miss'
params.nback = 2;       % Number of prior trials to regress against
params.interaction = true; % Consider interaction terms
params.interdt = 0.01; %For interpolation prior to timeseries alignment
params.regStep = 0.5;   % Duration of non-overlapping time windows
params.pvalThresh = 0.01;   % Alpha for significance test
params.xLabel = 'Time from sound cue (s)';  % XLabel

%***TEMP FOR DEVELOPMENT
% params.calc_Selectivity = false;
% params.expIDs = 1;
%params.numBootstrapRepeat = 100;
%params.cellIDs = 1:10;

expData = expData(end); %Sample data set for code development

%% Set paths

% Set paths to analysis code
[data_dir,~,~] = setPathList;
% Assign data directories and get experiment-spec parameters
[logfile,path] = uigetfile([data_dir '\*.log'],...
    'Select .LOG file generated by NBS Presentation');

%% Analyze behavior and generate figs

% Parse logfile
logData = parseLogfile(path,logfile);
% Get stimulus, response, and outcome data from each trial
[sessionData, trialData] = getSessionData(logData);
% Get data from each rule block
blocks = getBlockData(sessionData, trialData );
% Generate logical masks for specific trial types
trials = getTrialMasks(sessionData, trialData, blocks);
% Get performance data for each rule block (hitrate, persev error rate, etc.)
blocks = getPerfData( blocks, trials );

%Save processed data
mat_file = logfile(1:end-4);
save(fullfile(path, mat_file),...
    'logData','sessionData','trialData','blocks','trials');

%% Figures 

%Visualize raw behavioral data
time_range = [-2 5];
tlabel = [sessionData.subject{:},'--',sessionData.dateTime{1}];
fig = plot_flexBehByTrial(trialData,trials,tlabel,time_range);
savefig(fig,fullfile(path,['raw_beh_',mat_file]));
saveas(fig,fullfile(path,['raw_beh_',mat_file '.png']));
